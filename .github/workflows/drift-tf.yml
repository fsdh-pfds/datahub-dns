---
name: Terraform Drift Detection

on:
  # Runs at 03:00 UTC every day; adjust the cron as needed
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:
  pull_request:

permissions:
  id-token: write # Required for OIDC token exchange
  contents: read
  security-events: write
  issues: write  

concurrency:
  group: terraform-deployment
  cancel-in-progress: false

jobs:
  detect-drift:
    name: Detect Drift
    runs-on:
      group: "Prod FSDH Hosted Runners"
      labels: [self-hosted, linux, dns]
    environment: dns-tfservice-worker
    outputs:
      drift-exitcode: ${{ steps.plan.outputs.exitcode }}

    steps:
      - name: Login to Azure (OIDC)
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ secrets.AZ_APPLICATION_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Check out source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ secrets.TF_DNS_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_STATE }}" \
            -backend-config="subscription_id=${{ secrets.AZ_SUBSCRIPTION_ID }}"

      - name: Terraform Plan(Drift Scan)
        id: plan
        run: |
          set +e
          terraform plan -detailed-exitcode -out=tfplan -input=false \
            -var="azure_client_id=${{ secrets.AZ_APPLICATION_ID }}" \
            -var="azure_tenant_id=${{ secrets.AZ_TENANT_ID }}" \
            -var="azure_subscription_id=${{ secrets.AZ_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ secrets.TF_DNS_RESOURCE_GROUP }}" \
            -var="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -var="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" \
            -var="backend_state_name=${{ secrets.TF_BACKEND_STATE }}" \
            > /dev/null 2>&1
          exit_code=$?
          echo "exitcode=$exit_code" >> $GITHUB_OUTPUT

      - name: Echo drift status
        run: |
          if [ "${{ steps.plan.outputs.exitcode }}" = "2" ]; then
            echo "Drift detected"
          else
            echo "No drift detected"
          fi
      
      - name: Display Drift Report
        id: drift-report
        run: |
          terraform show -json tfplan \
            | jq '[ 
                .resource_changes[]
                | select(.change.actions | any(. != "no-op"))
                | { 
                    address: .address,
                    actions: .change.actions,
                    before: (.change.before | if . and has("tags") then del(.tags) else . end),
                    after:  (.change.after  | if . and has("tags") then del(.tags) else . end)
                  }
              ]'


  alert-and-report:
    name: Alert & Create Report
    needs: detect-drift
    runs-on: ubuntu-latest
    if: needs.detect-drift.outputs.drift-exitcode == '2'
    steps:

      - name: Find existing drift issue
        id: find_drift_report
        uses: KingBain/issues-helper@disable-thanks
        with:
          actions: find-issues
          show-thanks: true
          issue-state: 'open'
          title-includes: 'Terraform Drift Report'
          labels: 'terraform,drift,alert'

      - name: Create drift issue if missing
        if: steps.find_drift_report.outputs.issues == '[]'
        uses: KingBain/issues-helper@disable-thanks
        with:
          actions: create-issue
          show-thanks: false
          title: "Terraform Drift Report"
          labels: terraform,drift,alert
          body: |
            ## Drift Detection Alert
            
            **Environment:** DNS Environment
            **Workflow:** ${{ github.workflow }}
            
            ### Details
            - Terraform plan exit code: ${{ needs.detect-drift.outputs.drift-exitcode }}
            - Action Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Next Steps
            1. Review the terraform plan output in the GitHub Action logs
            2. Download the plan artifact for detailed analysis
            3. Investigate what caused the infrastructure drift
            4. Apply corrective measures
            
            ### Resources
            - [View Action Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Download Plan Artifact](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### Notified
            @fsdh-pfds/datahub-dns-write

            ### Report Updates
          
      - name: Update drift issue if present
        if: steps.find_drift_report.outputs.issues != '[]'
        uses: KingBain/issues-helper@disable-thanks
        with:
          actions: update-issue
          show-thanks: false
          issue-number: ${{ fromJSON(steps.find_drift_report.outputs.issues)[0].number }}
          update-mode: append
          body: |
            Drift still present as of this run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
