---
name: Terraform State Refresh

on:
  # Runs at 03:00 UTC every day; adjust the cron as needed
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  id-token: write # Required for OIDC token exchange
  contents: read
  security-events: write
  issues: write  

concurrency:
  group: terraform-deployment
  cancel-in-progress: false

jobs:
  detect-drift:
    runs-on:
      group: "Prod FSDH Hosted Runners"
      labels: [self-hosted, linux, dns]
    environment: dns-tfservice-planner

    steps:
      - name: Login to Azure (OIDC)
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2
        with:
          client-id: ${{ secrets.AZ_APPLICATION_ID }}
          tenant-id: ${{ secrets.AZ_TENANT_ID }}
          subscription-id: ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Check out source code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="resource_group_name=${{ secrets.TF_DNS_RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=${{ secrets.TF_BACKEND_STATE }}" \
            -backend-config="subscription_id=${{ secrets.AZ_SUBSCRIPTION_ID }}"

      - name: Refresh-only Plan
        run: |
          set +e
          terraform plan -refresh-only -detailed-exitcode -out=tfplan -input=false \
            -var="azure_client_id=${{ secrets.AZ_APPLICATION_ID }}" \
            -var="azure_tenant_id=${{ secrets.AZ_TENANT_ID }}" \
            -var="azure_subscription_id=${{ secrets.AZ_SUBSCRIPTION_ID }}" \
            -var="resource_group_name=${{ secrets.TF_DNS_RESOURCE_GROUP }}" \
            -var="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}" \
            -var="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" \
            -var="backend_state_name=${{ secrets.TF_BACKEND_STATE }}"
          echo "exitcode=$?" >> $GITHUB_OUTPUT
          
      - name: Generate drift details
        if: steps.plan.outputs.exitcode == '2'
        run: terraform show -no-color tfplan > drift.txt

      - name: Upload drift details artifact
        if: steps.plan.outputs.exitcode == '2'
        uses: actions/upload-artifact@v4
        with:
          name: drift-details
          path: drift.txt
  alert-and-report:
    name: Alert & SARIF Upload
    needs: detect-drift
    runs-on: ubuntu-latest
    if: needs.detect-drift.outputs.drift-exitcode == '2'
    steps:
      - name: Download drift details
        uses: actions/download-artifact@v4
        with:
          name: drift-details

      - name: Prepare issue body
        id: driftbody
        run: |
          echo "drift_body<<EOF" >> $GITHUB_OUTPUT
          echo "@datahub-dns-write Terraform plan detected drift when refreshing state." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "```diff" >> $GITHUB_OUTPUT
          sed 's/^/    /' drift.txt >> $GITHUB_OUTPUT
          echo "```" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue for Drift
        uses: dacbd/create-issue-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Terraform Drift Detected in DNS Environment"
          body: ${{ steps.driftbody.outputs.drift_body }}
          labels: terraform,drift

      - name: Generate SARIF report with fingerprint
        run: |
          FINGERPRINT=$(sha256sum drift.txt | awk '{print $1}')
          cat <<EOF > drift.sarif
{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Terraform Drift Detector",
          "informationUri": "https://github.com/your-org/terraform-drift-action"
        }
      },
      "results": [
        {
          "ruleId": "TF-DRIFT-001",
          "level": "warning",
          "message": { "text": "Terraform state drift detected. See drift.txt for full diff." },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "drift.txt"
                }
              }
            }
          ],
          "partialFingerprints": {
            "driftHash": "$FINGERPRINT"
          }
        }
      ]
    }
  ]
}
EOF

      - name: Upload SARIF to GitHub Security Center
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: drift.sarif